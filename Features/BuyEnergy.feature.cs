// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ENSEKUITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Buy Energy", Description="This feature covers scenarios regarding buying units of fuel and validating the U" +
        "I functionality.", SourceFile="Features\\BuyEnergy.feature", SourceLine=0)]
    public partial class BuyEnergyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BuyEnergy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Buy Energy", "This feature covers scenarios regarding buying units of fuel and validating the U" +
                    "I functionality.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
 #line hidden
#line 6
 testRunner.Given("I Navigate to ENSEK website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Then("The user should be in ENSEK homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.When("I click on Buy Energy button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("I click on Reset button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can buy gas energy based on quantity of units available", SourceLine=10)]
        public virtual void VerifyUserCanBuyGasEnergyBasedOnQuantityOfUnitsAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can buy gas energy based on quantity of units available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 12
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table1.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table1.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table1.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table1.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 13
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table1, "And ");
#line hidden
#line 19
 testRunner.When("I enter 20 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("I click on Buy button for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Gas We have popped it in the post and it will be with you shortly.The" +
                        "re are now 2980 units of Gas left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.And("the user should see Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can buy electricity energy based on quantity of units available", SourceLine=23)]
        public virtual void VerifyUserCanBuyElectricityEnergyBasedOnQuantityOfUnitsAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can buy electricity energy based on quantity of units available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 25
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table2.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table2.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table2.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table2.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 26
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table2, "And ");
#line hidden
#line 32
 testRunner.When("I enter 20 units required for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.And("I click on Buy button for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Electricity We have popped it in the post and it will be with you sho" +
                        "rtly.There are now 4302 units of Electricity left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("the user should see Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can buy oil energy based on quantity of units available", SourceLine=36)]
        public virtual void VerifyUserCanBuyOilEnergyBasedOnQuantityOfUnitsAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can buy oil energy based on quantity of units available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 38
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table3.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table3.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table3.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table3.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 39
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table3, "And ");
#line hidden
#line 45
 testRunner.When("I enter 20 units required for oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.And("I click on Buy button for oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Oil We have popped it in the post and it will be with you shortly.The" +
                        "re are now 0 units of Oil left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.And("the user should see Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy more gas energy if the quantity of units is less than dema" +
            "nd", SourceLine=49)]
        public virtual void VerifyUserCannotBuyMoreGasEnergyIfTheQuantityOfUnitsIsLessThanDemand()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy more gas energy if the quantity of units is less than dema" +
                    "nd", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 51
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table4.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table4.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table4.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table4.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 52
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table4, "And ");
#line hidden
#line 58
 testRunner.When("I enter 3001 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("The user should see buy button disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.When("I enter 20 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("The user should see buy button enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy gas energy with zero units required", SourceLine=62)]
        public virtual void VerifyUserCannotBuyGasEnergyWithZeroUnitsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy gas energy with zero units required", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 64
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table5.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table5.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table5.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table5.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 65
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table5, "And ");
#line hidden
#line 71
 testRunner.When("I enter 0 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then("The user should see buy button disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify Quantity of Units Available after buying units required for Gas Energy typ" +
            "e", SourceLine=73)]
        public virtual void VerifyQuantityOfUnitsAvailableAfterBuyingUnitsRequiredForGasEnergyType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Quantity of Units Available after buying units required for Gas Energy typ" +
                    "e", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 75
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table6.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table6.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table6.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table6.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 76
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table6, "And ");
#line hidden
#line 82
 testRunner.When("I enter 20 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.And("I click on Buy button for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Gas We have popped it in the post and it will be with you shortly.The" +
                        "re are now 2980 units of Gas left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table7.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "2980",
                            "0"});
                table7.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table7.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table7.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 87
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can buy more units of Gas Energy type", SourceLine=93)]
        public virtual void VerifyUserCanBuyMoreUnitsOfGasEnergyType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can buy more units of Gas Energy type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 95
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table8.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table8.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table8.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table8.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 96
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table8, "And ");
#line hidden
#line 102
 testRunner.When("I enter 20 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.And("I click on Buy button for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Gas We have popped it in the post and it will be with you shortly.The" +
                        "re are now 2980 units of Gas left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table9.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "2980",
                            "0"});
                table9.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table9.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table9.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 107
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table9, "And ");
#line hidden
#line 113
 testRunner.When("I enter 20 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.And("I click on Buy button for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Gas We have popped it in the post and it will be with you shortly.The" +
                        "re are now 2960 units of Gas left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table10.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "2960",
                            "0"});
                table10.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table10.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table10.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 118
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy more electricity energy if the quantity of units is less t" +
            "han demand", SourceLine=124)]
        public virtual void VerifyUserCannotBuyMoreElectricityEnergyIfTheQuantityOfUnitsIsLessThanDemand()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy more electricity energy if the quantity of units is less t" +
                    "han demand", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 126
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table11.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table11.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table11.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table11.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 127
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table11, "And ");
#line hidden
#line 133
 testRunner.When("I enter 4323 units required for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
 testRunner.Then("The user should see buy button disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
 testRunner.When("I enter 20 units required for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
 testRunner.Then("The user should see buy button enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy electricity energy with zero units required", SourceLine=137)]
        public virtual void VerifyUserCannotBuyElectricityEnergyWithZeroUnitsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy electricity energy with zero units required", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 139
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table12.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table12.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table12.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table12.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 140
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table12, "And ");
#line hidden
#line 146
 testRunner.When("I enter 0 units required for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
 testRunner.Then("The user should see buy button disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify Quantity of Units Available after buying units required for Electricity En" +
            "ergy type", SourceLine=148)]
        public virtual void VerifyQuantityOfUnitsAvailableAfterBuyingUnitsRequiredForElectricityEnergyType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Quantity of Units Available after buying units required for Electricity En" +
                    "ergy type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 150
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table13.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table13.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table13.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table13.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 151
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table13, "And ");
#line hidden
#line 157
 testRunner.When("I enter 20 units required for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 158
 testRunner.And("I click on Buy button for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Electricity We have popped it in the post and it will be with you sho" +
                        "rtly.There are now 4302 units of Electricity left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table14.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table14.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table14.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4302",
                            "0"});
                table14.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 162
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table14, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can buy more units of Electricity Energy type", SourceLine=168)]
        public virtual void VerifyUserCanBuyMoreUnitsOfElectricityEnergyType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can buy more units of Electricity Energy type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 170
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table15.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table15.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table15.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table15.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 171
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table15, "And ");
#line hidden
#line 177
 testRunner.When("I enter 20 units required for Electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
 testRunner.And("I click on Buy button for Electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Electricity We have popped it in the post and it will be with you sho" +
                        "rtly.There are now 4302 units of Electricity left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 181
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table16.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table16.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table16.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4302",
                            "0"});
                table16.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 182
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table16, "And ");
#line hidden
#line 188
 testRunner.When("I enter 20 units required for Electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
 testRunner.And("I click on Buy button for Electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Electricity We have popped it in the post and it will be with you sho" +
                        "rtly.There are now 4282 units of Electricity left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 192
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table17.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table17.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table17.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4282",
                            "0"});
                table17.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 193
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table17, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy more Oil energy if the quantity of units is less than dema" +
            "nd", SourceLine=199)]
        public virtual void VerifyUserCannotBuyMoreOilEnergyIfTheQuantityOfUnitsIsLessThanDemand()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy more Oil energy if the quantity of units is less than dema" +
                    "nd", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 201
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table18.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table18.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table18.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table18.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 202
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table18, "And ");
#line hidden
#line 208
 testRunner.When("I enter 21 units required for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("The user should see buy button disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.When("I enter 5 units required for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
 testRunner.Then("The user should see buy button enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy Oil energy with zero units required", SourceLine=212)]
        public virtual void VerifyUserCannotBuyOilEnergyWithZeroUnitsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy Oil energy with zero units required", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 214
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table19.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table19.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table19.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table19.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 215
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table19, "And ");
#line hidden
#line 221
 testRunner.When("I enter 0 units required for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 222
 testRunner.Then("The user should see buy button disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify Quantity of Units Available after buying units required for Oil Energy typ" +
            "e", SourceLine=223)]
        public virtual void VerifyQuantityOfUnitsAvailableAfterBuyingUnitsRequiredForOilEnergyType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Quantity of Units Available after buying units required for Oil Energy typ" +
                    "e", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 225
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table20.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table20.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table20.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table20.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 226
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table20, "And ");
#line hidden
#line 232
 testRunner.When("I enter 10 units required for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 233
 testRunner.And("I click on Buy button for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 1" +
                        "0 units of Oil We have popped it in the post and it will be with you shortly.The" +
                        "re are now 10 units of Oil left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table21.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table21.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table21.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table21.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "10",
                            "0"});
#line 237
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table21, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can buy more units of Oil Energy type", SourceLine=243)]
        public virtual void VerifyUserCanBuyMoreUnitsOfOilEnergyType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can buy more units of Oil Energy type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 245
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table22.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table22.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table22.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table22.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 246
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table22, "And ");
#line hidden
#line 252
 testRunner.When("I enter 10 units required for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 253
 testRunner.And("I click on Buy button for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 1" +
                        "0 units of Oil We have popped it in the post and it will be with you shortly.The" +
                        "re are now 10 units of Oil left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 256
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table23.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table23.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table23.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table23.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "10",
                            "0"});
#line 257
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table23, "And ");
#line hidden
#line 263
 testRunner.When("I enter 5 units required for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 264
 testRunner.And("I click on Buy button for Oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 5" +
                        " units of Oil We have popped it in the post and it will be with you shortly.Ther" +
                        "e are now 5 units of Oil left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 267
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table24.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table24.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table24.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table24.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "5",
                            "0"});
#line 268
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table24, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy more gas energy when no units are available", SourceLine=274)]
        public virtual void VerifyUserCannotBuyMoreGasEnergyWhenNoUnitsAreAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy more gas energy when no units are available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 275
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 276
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table25.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table25.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table25.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table25.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 277
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table25, "And ");
#line hidden
#line 283
 testRunner.When("I enter 3000 units required for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 284
 testRunner.And("I click on Buy button for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 3" +
                        "000 units of Gas We have popped it in the post and it will be with you shortly.T" +
                        "here are now 0 units of Gas left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 286
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 287
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table26.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "0",
                            "Not Available"});
                table26.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table26.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table26.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 288
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table26, "And ");
#line hidden
#line 294
 testRunner.And("The user should not see Buy button for gas energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy more electricity energy when no units are available", SourceLine=295)]
        public virtual void VerifyUserCannotBuyMoreElectricityEnergyWhenNoUnitsAreAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy more electricity energy when no units are available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 296
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 297
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table27.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table27.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table27.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table27.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 298
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table27, "And ");
#line hidden
#line 304
 testRunner.When("I enter 4322 units required for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 305
 testRunner.And("I click on Buy button for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 4" +
                        "322 units of Electricity We have popped it in the post and it will be with you s" +
                        "hortly.There are now 0 units of Electricity left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 307
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 308
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table28.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table28.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table28.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "0",
                            "Not Available"});
                table28.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "5",
                            "0"});
#line 309
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table28, "And ");
#line hidden
#line 315
 testRunner.And("The user should not see Buy button for electricity energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User cannot buy more oil energy when no units are available", SourceLine=316)]
        public virtual void VerifyUserCannotBuyMoreOilEnergyWhenNoUnitsAreAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User cannot buy more oil energy when no units are available", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 317
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 this.FeatureBackground();
#line hidden
#line 318
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table29.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table29.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table29.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table29.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "20",
                            "0"});
#line 319
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table29, "And ");
#line hidden
#line 325
 testRunner.When("I enter 20 units required for oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 326
 testRunner.And("I click on Buy button for oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
 testRunner.Then("the User should see Sale Confirmed! With message Thank you for your purchase of 2" +
                        "0 units of Oil We have popped it in the post and it will be with you shortly.The" +
                        "re are now 0 units of Oil left in our stores.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 328
 testRunner.When("the user clicks on Buy more button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 329
 testRunner.Then("the user should be navigated to Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "EnergyType",
                            "Price",
                            "QuantityOfUnitsAvailable",
                            "NumberOfUnitsRequired"});
                table30.AddRow(new string[] {
                            "Gas",
                            "£0.34 per m3",
                            "3000",
                            "0"});
                table30.AddRow(new string[] {
                            "Nuclear",
                            "£0.56 per MW",
                            "0",
                            "Not Available"});
                table30.AddRow(new string[] {
                            "Electricity",
                            "£0.47 per kWh",
                            "4322",
                            "0"});
                table30.AddRow(new string[] {
                            "Oil",
                            "£0.50 per Litres",
                            "0",
                            "Not Available"});
#line 330
 testRunner.And("the user should see the list of energy type with details", ((string)(null)), table30, "And ");
#line hidden
#line 336
 testRunner.And("The user should not see Buy button for oil energy type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
